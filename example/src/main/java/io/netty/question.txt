1.默认情况下，Netty服务端起多少线程？何时启动？

new NioEventLoopGroup()【线程组，默认2*cpu】

    new ThreadPerTaskExecutor()【线程创建器】

        * 每次执行任务都会创建一个线程实体

        * NioEventLoop线程命名规则nioEventLoop-1-xx     -1代表第几个nioEventLoopGroup  -xx代表 在nioEventLoopGroup中第几个 NioEventLoop

    for(){new Child()}【构造NioEventLoop】

        * 保存线程执行器ThreadPerTaskExecutor

        * 创建一个MpscQueue

        * 创建一个selector (每一个的NioEventLoop 都自己有一个selector)

    chooserFactory.newChooser()【线程选择器】



2.netty是如何解决jdk空轮询bug的？
    netty通过计数的方式，如果阻塞了一个select操作，实际上并没有花这么长时间，那么有可能出发了一次空轮询的bug,默认情况下，这个现象达到512次，
    则重建一个Selector,把原Selector上面所有的key移交到新的。通过这种方式避免。

3.Netty如何保证异步串行无锁化？
    在所有外部线程调用NioEventLoop里Channle的方法的时候，通过inEventLoop方法来判断当前线程是本NioEventLoop持有的线程(是否是外部线程)，
    外部线程的话，则把所有操作封装成一个task,丢到taskQueue里面。而这个队列里的task将会在NioEventLoop执行的第三个阶段runAllTask()中挨个执行，保证串行无锁化。


4.Netty是在哪里检测有新连接接入的

5.新连接是怎么注册到NioEventLoop线程的



6.Netty是如何判断ChannelHandler类型的

通过instanceOf 去判断

7.对于Channelhandler的添加应该遵循什么样的顺序

inbond顺序传播跟添加 channelHandler的顺序正相关
outBond顺序传播跟添加channelHandler的书序逆相关

8.用户手动触发事件传播，不同的触发方式有什么样的区别